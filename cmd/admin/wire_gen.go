// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"common/internal/conf"
	merchantBiz "common/internal/merchant/biz"
	merchantData "common/internal/merchant/data"
	merchantService "common/internal/merchant/service"
	"common/internal/pkg/data"
	"common/internal/pkg/server"
	userBiz "common/internal/user/biz"
	userData "common/internal/user/data"
	userService "common/internal/user/service"
	"github.com/go-kratos/kratos/v2"
)

// Injectors from wire.go:
// 依赖注入
func wireApp(confServer *conf.Server, confData *conf.Data) (*kratos.App, func(), error) {
	db, err := data.NewDb(confData)
	if err != nil {
		return nil, nil, err
	}
	cmdable, err := data.NewRedisCli(confData)
	if err != nil {
		return nil, nil, err
	}
	dataData, cleanup, err := data.NewData(db, cmdable)
	if err != nil {
		return nil, nil, err
	}
	merchantRepo := merchantData.NewMerchantRepo(dataData)
	merchantUseCase := merchantBiz.NewMerchantUseCase(merchantRepo)
	businessLineRepo := merchantData.NewBusinessLineRepo(dataData)
	businessLineUseCase := merchantBiz.NewBusinessLineUseCase(businessLineRepo)
	merchantService := merchantService.NewMerchantService(merchantUseCase, businessLineUseCase)
	userRepo := userData.NewUserRepo(dataData)
	userUseCase := userBiz.NewUserUseCase(userRepo)
	userService := userService.NewUserService(userUseCase)
	httpServer := server.NewHTTPServer(confServer, merchantService, userService)
	grpcServer := server.NewGRPCServer(confServer, merchantService, userService)
	app := newApp(httpServer, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
